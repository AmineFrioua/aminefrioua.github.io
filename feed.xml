<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://aminefrioua.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aminefrioua.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-11T04:26:53+00:00</updated><id>https://aminefrioua.github.io/feed.xml</id><title type="html">Software Engineer</title><subtitle>Hi come check what I do 
</subtitle><entry><title type="html">Ruby on Rails is actually fun</title><link href="https://aminefrioua.github.io/blog/2023/ruby-is-actually-fun/" rel="alternate" type="text/html" title="Ruby on Rails is actually fun" /><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://aminefrioua.github.io/blog/2023/ruby-is-actually-fun</id><content type="html" xml:base="https://aminefrioua.github.io/blog/2023/ruby-is-actually-fun/"><![CDATA[<p>Are you looking for a fun and engaging way to learn web development? Look no further than Ruby on Rails! Rails is a web framework written in the Ruby programming language, and it’s known for its simplicity, elegance, and ease of use.
 At first I saw it in so many job applications, so I was like what the hell let me try and after so many years away from it it actually turned out Ok and here is my take on it.</p>

<p>One of the best things about Rails is how easy it is to get started. With just a few lines of code, I can create a new Rails application and have a functioning website up and running in no time. For example, I can use the “rails new” command to create a new Rails application, and then use the “rails server” command to start a local web server that serves my application. From there, I can start building out my website using Rails’ intuitive and easy-to-use MVC (Model-View-Controller) architecture.</p>

<p>Another great thing about Rails is its emphasis on convention over configuration. This means that Rails has a set of conventions and best practices that developers follow, which makes it easy to get started and avoids a lot of the overhead that comes with configuring other web frameworks. For example, Rails automatically generates a lot of boilerplate code for me, such as models, views, and controllers, based on the conventions of my application.</p>

<p>One of my favorite features of Rails is its focus on testing. Rails comes with a built-in testing framework called Test::Unit, which makes it easy to write and run tests for my application. This helps me catch bugs and ensure that my code is working as expected. Plus, writing tests can be a fun and rewarding experience, as I get to see my application come to life and know that it’s working correctly.</p>

<p>Rails also has a thriving community of developers who contribute to its development and share their knowledge and expertise. There are numerous resources available online, including documentation, tutorials, and forums, that make it easy to learn Rails and get help when I need it.</p>

<p>In addition to its ease of use and simplicity, Rails is also a powerful and versatile web framework. It’s used by companies big and small, such as Basecamp, Airbnb, and GitHub, to build complex and scalable web applications. With Rails, I can build anything from a simple blog to a full-fledged e-commerce platform.</p>

<p>In conclusion, if you’re looking for a fun and engaging way to learn web development, look no further than Ruby on Rails. With its simplicity, elegance, and ease of use, Rails makes it easy to get started and build powerful web applications. So what are you waiting for? Give Rails a try and see for yourself how fun and rewarding web development can be!</p>]]></content><author><name></name></author><category term="development" /><summary type="html"><![CDATA[My time learning with Ruby on rails]]></summary></entry><entry><title type="html">Job Hunting in japan</title><link href="https://aminefrioua.github.io/blog/2023/let-the-hunt-begins/" rel="alternate" type="text/html" title="Job Hunting in japan" /><published>2023-03-20T18:37:00+00:00</published><updated>2023-03-20T18:37:00+00:00</updated><id>https://aminefrioua.github.io/blog/2023/let-the-hunt-begins</id><content type="html" xml:base="https://aminefrioua.github.io/blog/2023/let-the-hunt-begins/"><![CDATA[]]></content><author><name></name></author><category term="life" /><summary type="html"><![CDATA[May the odds be in your favor]]></summary></entry><entry><title type="html">Is Go worth it</title><link href="https://aminefrioua.github.io/blog/2023/what-is-the-hype-about-go/" rel="alternate" type="text/html" title="Is Go worth it" /><published>2023-03-20T15:59:00+00:00</published><updated>2023-03-20T15:59:00+00:00</updated><id>https://aminefrioua.github.io/blog/2023/what-is-the-hype-about-go</id><content type="html" xml:base="https://aminefrioua.github.io/blog/2023/what-is-the-hype-about-go/"><![CDATA[<p>Sure, here’s a blog post from your perspective on why there’s no need to switch to Go even though it does everything that Python does:</p>

<p>As a software developer, I’ve noticed a trend in the industry where many developers are switching from Python to Go. While Go certainly has its strengths, I personally don’t see the need to switch from Python to Go, even though Go can do everything that Python can.</p>

<p>For me, Python is a versatile and easy-to-learn language that’s perfect for rapid prototyping and development. It has a vast collection of libraries and frameworks that make it easy to build complex applications, and its syntax is clean and easy to read. Whether I’m working on a machine learning project, a web application, or a general-purpose script, Python always seems to have a library or tool that makes the task easier.</p>

<p>So why are so many people switching to Go? One reason is that Go is often seen as faster and more efficient than Python. While this may be true in some cases, I’ve found that Python’s performance is more than adequate for most tasks. In fact, Python’s performance can often be improved by using tools like PyPy or Cython, which can compile Python code to machine code and improve its speed.</p>

<p>Another reason for the switch to Go is that it’s backed by Google, which has been pushing for its adoption. While this may be a factor for some developers, I don’t think it’s a compelling reason to switch from Python. Python has a huge community and is used by some of the biggest tech companies in the world, so I don’t see it going away anytime soon.</p>

<p>In conclusion, while Go may be a great language for some developers, I personally don’t see the need to switch from Python. Python is a versatile, easy-to-learn language with a huge community and a vast collection of libraries and tools. While Go may have its strengths, I don’t think it’s worth abandoning Python for.</p>]]></content><author><name></name></author><category term="development" /><summary type="html"><![CDATA[My time learning Go]]></summary></entry><entry><title type="html">Updating dependencies</title><link href="https://aminefrioua.github.io/blog/2022/updating-dependencies-can-be-fun/" rel="alternate" type="text/html" title="Updating dependencies" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://aminefrioua.github.io/blog/2022/updating-dependencies-can-be-fun</id><content type="html" xml:base="https://aminefrioua.github.io/blog/2022/updating-dependencies-can-be-fun/"><![CDATA[<p>Updating dependencies in a big project can be a daunting task, especially if you have many dependencies and haven’t updated them in a while. However, with the right mindset and approach, updating dependencies can actually be fun and rewarding.</p>

<p>Recently I had to do this, so i dove rigth into it and here are some tips i can provide from my experience:</p>

<p>1- Create a checklist: Before updating any dependencies, create a checklist of all the dependencies you need to update and the steps required to update them. This will help you stay organized and ensure that you don’t miss any dependencies.</p>

<p>2- Set aside dedicated time: Updating dependencies can be time-consuming, so set aside dedicated time to focus on this task. You can also make it more enjoyable by listening to music or a podcast while you work.</p>

<p>3- Celebrate progress: Updating dependencies can be a long process, so celebrate your progress along the way. For example, you can treat yourself to a snack or take a short break after each dependency update.</p>

<p>4- Learn something new: Updating dependencies can also be a great opportunity to learn something new. Take the time to read the release notes and learn about any new features or changes in the updated dependencies.</p>

<p>5- Involve the team: Updating dependencies can be a team effort, so involve your team members in the process. You can assign each team member a set of dependencies to update or hold a mini-hackathon to update dependencies together.</p>

<p>By following these tips, updating dependencies in a big project can be a fun and rewarding experience. Not only will you improve the performance and security of your project, but you’ll also learn new skills and strengthen your team’s collaboration. So go ahead and update those dependencies – you might be surprised at how fun it can be!</p>]]></content><author><name></name></author><category term="development" /><summary type="html"><![CDATA[Updating dependencies can be fun]]></summary></entry></feed>